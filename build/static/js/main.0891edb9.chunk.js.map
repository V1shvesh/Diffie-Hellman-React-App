{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sanitizeInput","input","parseInt","isPrime","num","i","Math","sqrt","App","_useState","useState","NaN","_useState2","Object","slicedToArray","numA","setNumA","_useState3","_useState4","numB","setNumB","_useState5","hasOccured","message","_useState6","error","setError","_useState7","hasComputed","xa","xb","ya","yb","ha","hb","_useState8","result","setResult","react_default","a","createElement","className","id","htmlFor","type","value","isNaN","onChange","e","target","placeholder","onClick","preventDefault","b","Error","floor","random","pow","generateSharedKeys","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0891edb9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction sanitizeInput(input) {\n  return parseInt(input, 10);\n}\n\nfunction isPrime(num) {\n  if(num % 2 === 0) return false;\n\n  for(let i=3; i <= Math.sqrt(num); i+=2) {\n    if(num%i===0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction App() {\n  const [numA, setNumA] = useState(NaN);\n  const [numB, setNumB] = useState(NaN);\n  const [error, setError] = useState({\n    hasOccured: false,\n    message: '',\n  });\n  const [result, setResult] = useState({\n    hasComputed: false,\n    xa: 0,\n    xb: 0,\n    ya: 0,\n    yb: 0,\n    ha: 0,\n    hb: 0,\n  });\n\n  const generateSharedKeys = (a, b) => {\n    setResult({\n      hasComputed: false,\n      xa: 0,\n      xb: 0,\n      ya: 0,\n      yb: 0,\n      ha: 0,\n      hb: 0,\n    });\n    setError({\n      hasOccured: false,\n      message: false,\n    });\n    try {\n      if(!isPrime(a))\n        throw Error('Num A is not a prime!');\n      if(!isPrime(b))\n        throw Error('Num B is not a prime!');\n      \n      const xa = Math.floor(Math.random()*b + 1);\n      const xb = Math.floor(Math.random()*b + 1);\n\n      const ya = Math.pow(a, xa) % b;\n      const yb = Math.pow(a, xb) % b;\n\n      const ha = Math.pow(yb, xa) % b;\n      const hb = Math.pow(ya, xb) % b;\n\n      setResult({\n        hasComputed: true,\n        xa,\n        xb,\n        ya,\n        yb,\n        ha,\n        hb,\n      });\n\n    } catch (error) {\n      setError({\n        hasOccured: true,\n        message: error.message,\n      });\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <form id=\"form-input\">\n        <h1>Diffie Hellman <br/> Key Exchange</h1>\n        <label htmlFor=\"input-num-1\"> Num A\n          <input\n            id=\"input-num-a\"\n            type='text'\n            value={isNaN(numA)?'':numA}\n            onChange={(e) => setNumA(sanitizeInput(e.target.value))}\n            placeholder={0}\n          />\n        </label>\n        <label htmlFor=\"input-num-1\"> Num B\n          <input\n            id=\"input-num-2\"\n            type='text'\n            value={isNaN(numB)?'':numB}\n            onChange={(e) => setNumB(sanitizeInput(e.target.value))}\n            placeholder={0}\n          />\n        </label>\n        <button\n          className=\"btn btn-get-key\"\n          onClick={(e) => {\n            e.preventDefault();\n            generateSharedKeys(numA, numB);\n          }}\n        >\n          Get Key\n        </button>\n      </form>\n      {\n        error.hasOccured && (\n          <div className=\"error-box\">\n            {error.message}\n          </div>\n        )\n      }\n      {\n        result.hasComputed && (\n          <div className=\"result-box\">\n          <pre>{`Result\\n\\nha: ${result.ha}\\nhb: ${result.hb}`}</pre>\n          </div>\n        )\n      }\n      <footer>Made by Rishav Chaudhary & Kabir Bhal</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}